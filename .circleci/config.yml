version: 2

templates:
  jobs: &job_settings
    docker:
      - image: trek10/ci:8.4

  env:global: &env_global
    SLS_VERSION: "1.40.0" # make sure this matches your pinned version (if you have one)!
    SLS_YAML_DIR: "." # This is relative to repo root. If serverless.yml is in the repo root, this should be "."
    AWS_CLI_DEFAULT_REGION: ca-central-1

  env:prod: &env_prod
    SLS_STAGE_NAME: prod
    REGION: ca-central-1
    # ACCOUNT: "xxx"
    # DEPLOYMENT_ROLE: "arn:aws:iam::xxx:role/ci-demo-deployer-admin-role"

  env:staging: &env_staging
    SLS_STAGE_NAME: staging
    REGION: ca-central-1
    # ACCOUNT: "xxx"
    # DEPLOYMENT_ROLE: "arn:aws:iam::xxx:role/ci-demo-deployer-admin-role"

  env:dev: &env_dev
    SLS_STAGE_NAME: dev
    REGION: ca-central-1
    # ACCOUNT: "xxx"
    # DEPLOYMENT_ROLE: "arn:aws:iam::xxx:role/ci-demo-deployer-admin-role"

  steps:test: &steps_test
    steps:
      - checkout
      - run: 
          command: |
            if test -f package.json; then
              npm install --loglevel error;
              npm run test;
            else
              echo "no package.json found to run tests from";
            fi

  steps:deploy: &steps_deploy
    steps:
      - checkout
      - run: 
          command: |
            echo "===== Stage => ${SLS_STAGE_NAME//-/}, Region => ${REGION} ====="
            echo "===== checking for tag and presence in master branch => ${CIRCLE_TAG:-"(not a tag)"} ====="
            ([ -z ${CIRCLE_TAG} ] || (git branch -r --contains `git rev-list -n 1 ${CIRCLE_TAG}` | grep master))
            echo "===== installing serverless ====="
            npm install -g serverless@${SLS_VERSION:-"latest"} --loglevel error
            echo "===== assuming permissions => ====="
            unset AWS_SECURITY_TOKEN
            KST=(`aws sts assume-role --role-arn ${DEPLOYMENT_ROLE} --role-session-name "deployment-${CIRCLE_PROJECT_REPONAME}" --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' --output text`)
            export AWS_DEFAULT_REGION=${AWS_CLI_DEFAULT_REGION}
            export AWS_ACCESS_KEY_ID=${KST[0]}
            export AWS_SECRET_ACCESS_KEY=${KST[1]}
            export AWS_SESSION_TOKEN=${KST[2]}
            export AWS_SECURITY_TOKEN=${KST[2]}
            echo "===== deploying to ${CIRCLE_STAGE} environment ====="
            cd ${SLS_YAML_DIR}
            if test -f package.json; then
              npm install --loglevel error;
            fi
            sls deploy -v -s ${SLS_STAGE_NAME//-/} --region ${REGION:-"us-east-1"} --ciname circleci

jobs:
  test_prod:
    <<: *job_settings
    <<: *steps_test
    environment:
      <<: *env_global
      <<: *env_prod

  deploy_prod:
    <<: *job_settings
    <<: *steps_deploy
    environment:
      <<: *env_global
      <<: *env_prod

  test_staging:
    <<: *job_settings
    <<: *steps_test
    environment:
      <<: *env_global
      <<: *env_staging

  deploy_staging:
    <<: *job_settings
    <<: *steps_deploy
    environment:
      <<: *env_global
      <<: *env_staging

  test_dev:
    <<: *job_settings
    <<: *steps_test
    environment:
      <<: *env_global
      <<: *env_dev

  deploy_dev:
    <<: *job_settings
    <<: *steps_deploy
    environment:
      <<: *env_global
      <<: *env_dev

workflows:
  version: 2
  prod:
    jobs:
      - test_prod:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - approval_prod:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - test_prod
      - deploy_prod:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - approval_prod
  staging:
    jobs:
      - test_staging:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - deploy_staging:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - test_staging
  dev:
    jobs:
      - test_dev:
          filters:
            branches:
              only:
                - master
      - deploy_dev:
          requires:
            - test_dev
  default:
    jobs:
      - test_dev:
          filters:
            branches:
              ignore:
                - master
